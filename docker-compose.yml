version: '3.8'

services:
  # Main application with both backend and webui
  browser-automation:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # Backend API
      - "7788:7788"  # Web UI
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      # Browser settings optimized for Docker
      - BROWSER_HEADLESS=true
      - BROWSER_DISABLE_SECURITY=true
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
      # Resource limits
      - MAX_SESSIONS=20
      - MAX_BROWSER_INSTANCES=5
      - MAX_MEMORY_USAGE_MB=2048
      - SESSION_TIMEOUT_MINUTES=30
      # Security
      - CORS_ORIGINS=*
      - ENABLE_RATE_LIMITING=true
      - API_RATE_LIMIT_PER_MINUTE=100
      # Display settings
      - DISPLAY=:99
      - RESOLUTION=1920x1080x24
    volumes:
      # Persist data
      - ./tmp:/app/tmp
      # Playwright cache
      - playwright_cache:/app/.cache/ms-playwright
      # Logs
      - ./logs:/var/log/supervisor
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "&&", "curl", "-f", "http://localhost:7788/"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - app-network
    # Add security options for browser operation
    security_opt:
      - seccomp:unconfined
    # Required for Chrome/Chromium in Docker
    shm_size: 2gb

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - browser-automation
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

volumes:
  redis_data:
  playwright_cache:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16